{% extends 'admin/base.html.twig' %}

{% block title %}Store Products{% endblock %}

{% block breadcrumbs %}
    <ul class="breadcrumbs">
        <li><a href="{{ path('department_index') }}">Departments</a></li>
        <li><a href="{{ path('category_index', {'departmentId': department.id}) }}">Categories</a></li>
        <li>
            <a href="{{ path('product_index', {'departmentId': department.id, 'categoryId': category.id}) }}">Products</a>
        </li>
        <li class="current"><a
                    href="{{ path('product_index', {'departmentId': department.id, 'categoryId': category.id, 'productId': product.id}) }}">Product
                Details</a></li>
    </ul>
{% endblock %}

{% block body %}
    <section id="adminProductsDetailViewContainer" class="admin-content-container">
        <div class="row">
            <div class="large-8 columns large-centered">
                {{ form_start(form, {'multipart': true}) }}
                <div class="row">
                    <div class="large-12 columns">
                        <label for="departmentId">Department</label>
                        <select id="departmentId" name="departmentId">
                            <option value="0">- change -</option>
                            {% for dept in departments %}
                                <option value="{{ dept.id }}"{% if dept.id == product.category.departmentId %} selected="selected"{% endif %}>{{ dept.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="large-12 columns">
                        {{ form_row(form.category, {'label': 'Category', 'required': true}) }}
                    </div>
                </div>
                <div class="row">
                    <div class="large-8 columns">
                        {{ form_row(form.name, {'label': 'Product Title'}) }}
                    </div>
                    <div class="large-4 columns">
                        {{ form_row(form.isTaxable, {'label': 'Taxable', 'required': false}) }}
                    </div>
                </div>
                <div class="row">
                    <div class="large-6 columns">
                        {{ form_row(form.oldPrice, {'label': 'Old Price', 'required': false}) }}
                    </div>
                    <div class="large-6 columns">
                        {{ form_row(form.price, {'label': 'Actual Price', 'required': false}) }}
                    </div>
                </div>
                <div class="row">
                    {#<div class="large-4 columns">#}
                        {#{{ form_row(form.price, {'label': 'Price', 'required': false}) }}#}
                    {#</div>#}
                    <div class="large-6 columns">
                        {{ form_row(form.qty, {'label': 'Qty', 'required': false}) }}
                    </div>
                    <div class="large-6 columns">
                        {{ form_row(form.dimension, {'label': 'Dimension', 'required': false}) }}
                    </div>
                </div>
                <div class="row">
                    <div class="large-12 columns">
                        {{ form_row(form.availability, {'label': 'Availability Time', 'required': false}) }}

                        <div id="availability-tags"{% if (product.availability != 'weekdays' and product.availability != 'multidays') %} style="display: none;"{% endif %}>
                            <ul id="availability_days_tags"></ul>
                            <small id="availability_days_error" class="error" style="display: none;"></small>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="large-12 columns">
                        {{ form_row(form.description, {'label': 'Description', 'required': false}) }}
                    </div>
                </div>

                <div class="row">
                    <div class="large-12 columns">
                        <label>Tags
                            <small>(comma separated)</small>
                            <input type="text" id="product_tags" name="tags" value="{{ tags }}"
                                   placeholder="Product Tags...">
                        </label>
                    </div>
                </div>
                <div class="row">
                    <div class="large-12 columns">
                        <label>Photo(s) Upload
                            <input type="file" name="photos[]" placeholder="Product Photo..." multiple>
                        </label>
                    </div>
                </div>
                <div class="row">
                    <div class="large-12 columns">
                        <input type="submit" value="Save" class="button expand">
                    </div>
                </div>

                {% if (product.photos|length > 0) %}
                    <div class="row">
                        <div class="large-12 columns">
                            <label>Uploaded Images</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="large-12 columns">
                            <ul id="sortable" class="small-block-grid-2 large-block-grid-4">
                                {% for photo in product.photos %}
                                    <li id="image_{{ photo.id }}">
                                        <a id="delimage_{{ photo.id }}" href="#" class="delimage">X</a>
                                        <img data-caption="" class="th" src="/{{ uploadDirLarge }}{{ photo.fileName }}"
                                             alt=""><br>
                                        <input type="text" id="caption_{{ photo.id }}" name="caption_{{ photo.id }}"
                                               value="{{ photo.caption }}" placeholder="Caption...">
                                    </li>
                                {% endfor %}
                            </ul>
                        </div>
                    </div>
                {% endif %}
                {{ form_end(form) }}
            </div>
        </div>
    </section>
{% endblock %}

{% block javascripts %}
    <script>
        var ajax_endpoint = '{{ app.request.uri }}';

        $(function () {
            $sortableElem = $('#sortable');
            $availability = $('#app_bundle_product_type_availability');
            $availabilityDays = $('#app_bundle_product_type_availabilityDays');

            // sortable
            $sortableElem.sortable({
                items: 'li',
                update: function (event, ui) {
                    $.ajax({
                        type: 'post',
                        url: '{{ path('photo_sort', {'departmentId': department.id, 'categoryId': category.id}) }}',
                        dataType: 'json',
                        data: $('#sortable').sortable('serialize'), // End data
                        success: function (result) {
                            if (!result) {
                                alert('No response from the server.');
                            } else if (result.code == '2') {
                                window.location = '{{ path('security_login') }}';// expired session
                            } else if (result.code == '0') {
                                //ok
                            } else {
                                alert(result.message);
                            }
                        }, // End success
                        error: function (request, error) {
                            var errmsg = '';
                            if (error == 'timeout') errmsg = 'The request timed out';
                            else errmsg = 'ERROR: ' + error;
                            if (errmsg != '') console.log(errmsg);
                        } // End error
                    }); // End ajax method
                }
            });

            $sortableElem.on('click', 'a[id^="delimage_"]', function (e) {
                e.preventDefault();
                var photoId = $(this).attr('id').split('_')[1];
                $.ajax({
                    type: 'post',
                    url: '{{ path('photo_delete', {'departmentId': department.id, 'categoryId': category.id, 'productId': product.id}) }}/' + photoId,
                    dataType: 'json',
                    data: {productId: {{ product.id }}, photoId: photoId}, // End data
                    success: function (result) {
                        if (!result) {
                            alert('No response from the server.');
                        } else if (result.code == '2') {
                            window.location = '{{ path('security_login') }}';// expired session
                        } else if (result.code == '0') {
                            $('#image_' + photoId).remove();
                            $('#sortable').sortable('refresh');
                        } else {
                            alert(result.message);
                        }
                    }, // End success
                    error: function (request, error) {
                        var errmsg = '';
                        if (error == 'timeout') errmsg = 'The request timed out';
                        else errmsg = 'ERROR: ' + error;
                        if (errmsg != '') alert(errmsg);
                    } // End error
                }); // End ajax method
            });

            $('#departmentId').bind('change', function () {
                var newDepartmentId = $(this).val();
                $.ajax({
                    type: 'post',
                    url: '{{ path('change_department', {'departmentId': department.id, 'categoryId': category.id, 'productId': product.id}) }}/' + newDepartmentId,
                    dataType: 'json',
                    data: { productId: {{ product.id }}, newDepartmentId: newDepartmentId }, // End data
                    success: function (result) {
                        if (!result) {
                            alert('No response from the server.');
                        } else if (result.code == '2') {
                            window.location = '{{ path('security_login') }}';// expired session
                        } else if (result.code == '0') {
                            window.location = result.data.url;
                        } else {
                            alert(result.message);
                        }
                    }, // End success
                    error: function (request, error) {
                        var errmsg = '';
                        if (error == 'timeout') errmsg = 'The request timed out';
                        else errmsg = 'ERROR: ' + error;
                        if (errmsg != '') console.log(errmsg);
                    } // End error
                }); // End ajax method
            });

            $availability.bind('change', function () {
                var availability = $.trim($availability.val());
                var $availabilityTags = $('#availability-tags');

                switch (availability) {
                    case 'weekdays':
                        $('input.ui-autocomplete-input', '.tagit-new').attr('placeholder', 'Ex.: Sunday');
                        $availabilityTags.css('display', 'block');
                        break;

                    case 'multidays':
                        $('input.ui-autocomplete-input', '.tagit-new').attr('placeholder', 'Ex.: ' + getTodayDate());
                        $availabilityTags.css('display', 'block');
                        break;

                    default:
                        $availabilityTags.css('display', 'none');
                        break;
                }

                if (availability == 'weekdays') {
                    $('#prepopulate-inner').css('display', 'block');
                } else {
                    $('#prepopulate-inner').css('display', 'none');
                }

                // clear tag area
                $availabilityDays.val('');
                window.setTimeout(function () {
                    $('#availability_days_tags').tagit('removeAll');
                }, 100);

                updateAvailabilityTime();
            });

            t = $('#availability_days_tags').tagit({
                placeholderText: 'Availability Time...',
                triggerKeys: ['enter', 'comma', 'tab'],
                // This will make Tag-it submit a single form value, as a comma-delimited field.
                singleField: true,
                singleFieldNode: $availabilityDays,
                beforeTagAdded: function (evt, ui) {
                    if (!ui.duringInitialization) {
                        var error_field = $('#availability_days_error');
                        error_field.html('').css('display', 'none');

                        switch ($availability.val()) {
                            case 'weekdays':
                                var weekday = $(this).tagit('tagLabel', ui.tag);
                                var days_of_week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                                if (days_of_week.indexOf(weekday) == -1) {
                                    error_field.html('Invalid week day name!').css('display', 'block');
                                    return false;
                                }
                                break;

                            case 'multidays':
                                var date_label = $(this).tagit('tagLabel', ui.tag);
                                var regex_date = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
                                if (!regex_date.test(date_label)) {
                                    error_field.html('Invalid US date format (MM/DD/YYYY)!').css('display', 'block');
                                    return false;
                                }
                                break;
                        }
                    }
                },
                afterTagAdded: function (evt, ui) {
                    if (!ui.duringInitialization) {
                        updateAvailabilityTime();
                    }
                },
                afterTagRemoved: function (evt, ui) {
                    updateAvailabilityTime();
                }
            });
        });
        
        function updateAvailabilityTime() {
            // empty
        }

        function getTodayDate() {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!

            var yyyy = today.getFullYear();
            if (dd < 10) {
                dd = '0' + dd;
            }
            if (mm < 10) {
                mm = '0' + mm;
            }

            return dd + '/' + mm + '/' + yyyy;
        }

    </script>
{% endblock %}
