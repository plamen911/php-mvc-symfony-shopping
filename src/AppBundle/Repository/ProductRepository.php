<?php

namespace AppBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAllByKeyword($keyword = '')
    {
        $qb = $this->createQueryBuilder('product')
            ->leftJoin('product.category', 'category')
            ->leftJoin('category.department', 'department');

        switch ($keyword) {
            case 'today':
                $cond = "
                    (
                      (
                         product.availability IN ('weekdays', 'multidays')
                         AND product.availabilityDays IS NOT NULL 
                         AND product.availabilityDays NOT LIKE ''
                         AND (
                            product.availabilityDays LIKE :weekday 
                            OR product.availabilityDays LIKE :weekday 
                            OR product.availabilityDays LIKE :weekday
                         )
                      )
                      OR
                      (
                         product.availability IN ('daily')
                      )
                    )";

                $qb->where($cond)
                    ->setParameter('weekday', '%' . date('l') . '%');
                break;

            default:
                $qb->where('product.name LIKE :keyword')
                    ->setParameter('keyword', '%' . $keyword . '%');
                break;
        }

        $qb->setMaxResults(1000)
            ->orderBy('department.name', 'ASC')
            ->addOrderBy('category.name', 'ASC')
            ->addOrderBy('product.name', 'ASC');
        $query = $qb->getQuery();
        $products = $query->getResult();

        $items = [];
        $departments = [];
        $categories = [];
        /**
         * @var \AppBundle\Entity\Product $product
         */
        foreach ($products as $product) {
            $departmentId = $product->getCategory()->getDepartment()->getId();
            $categoryId = $product->getCategory()->getId();
            $items[$departmentId][$categoryId][$product->getId()] = $product;

            $departments[$departmentId] = $product->getCategory()->getDepartment();
            $categories[$categoryId] = $product->getCategory();
        }

        $data = new \stdClass();
        $data->items = $items;
        $data->departments = $departments;
        $data->categories = $categories;
        $data->keyword = $keyword;

        return $data;
    }

    public function OLD_findAllByKeyword($keyword = '')
    {
        $query = $this->createQueryBuilder('product')
            ->leftJoin('product.category', 'category')
            ->leftJoin('category.department', 'department')
            ->where('product.name LIKE :keyword')
            ->setParameter('keyword', '%' . $keyword . '%')
            ->setMaxResults(100)
            ->orderBy('department.name', 'ASC')
            ->addOrderBy('category.name', 'ASC')
            ->addOrderBy('product.name', 'ASC')
            ->getQuery();

        $products = $query->getResult();

        $items = [];
        $departments = [];
        $categories = [];
        /**
         * @var \AppBundle\Entity\Product $product
         */
        foreach ($products as $product) {
            $departmentId = $product->getCategory()->getDepartment()->getId();
            $categoryId = $product->getCategory()->getId();
            $items[$departmentId][$categoryId][$product->getId()] = $product;

            $departments[$departmentId] = $product->getCategory()->getDepartment();
            $categories[$categoryId] = $product->getCategory();
        }

        $data = new \stdClass();
        $data->items = $items;
        $data->departments = $departments;
        $data->categories = $categories;
        $data->keyword = $keyword;

        return $data;
    }
}
