<?php

namespace AppBundle\Repository;

use AppBundle\Utils\PaginatorHelper;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * StoreOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoreOrderRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * https://anil.io/blog/symfony/doctrine/symfony-and-doctrine-pagination-with-twig/
     * 1. Create & pass query to paginate method
     * 2. Paginate will return a `\Doctrine\ORM\Tools\Pagination\Paginator` object
     * 3. Return that object to the controller
     *
     * @param array $params
     * @param integer $page The current page (passed from controller)
     *
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function search(array $params, $page = 1, $limit = 20)
    {
        $page = (int)$page;
        $limit = (int)$limit;

        $qb = $this->createQueryBuilder('o');

        if (!empty($params['userId'])) {
            $qb->where('o.orderStatus = :orderStatus')
                ->setParameter('orderStatus', 1);
        }
        if (!empty($params['userId'])) {
            $qb->andWhere('o.userId = :userId')
                ->setParameter('userId', $params['userId']);
        }
        if (!empty($params['orderNum'])) {
            $qb->andWhere('o.orderNum LIKE :orderNum')
                ->setParameter('orderNum', '%' . $params['orderNum'] . '%');
        }
        if (!empty($params['orderDateFrom']) && preg_match('/^(\d{2})\/(\d{2})\/(\d{4})$/', $params['orderDateFrom'], $matches)) {
            $params['orderDateFrom'] = $matches[3] . '-' . $matches[1] . '-' . $matches[2] . ' 00:00:00';
            $qb->andWhere('o.orderDate >= :orderDateFrom')
                ->setParameter('orderDateFrom', $params['orderDate']);
        }
        if (!empty($params['orderDateTo']) && preg_match('/^(\d{2})\/(\d{2})\/(\d{4})$/', $params['orderDateTo'], $matches)) {
            $params['orderDateTo'] = $matches[3] . '-' . $matches[1] . '-' . $matches[2] . ' 23:59:59';
            $qb->andWhere('o.orderDate <= :orderDateTo')
                ->setParameter('orderDateTo', $params['orderDate']);
        }

        // Delivery dates search
        $IDs = array();
        $hit = false;
        $deliveryDateFrom = $deliveryDateTo = '';
        if (!empty($params['deliveryDateFrom']) && preg_match('/^(\d{2})\/(\d{2})\/(\d{4})$/', $params['deliveryDateFrom'], $matches)) {
            $deliveryDateFrom = $matches[3] . '-' . $matches[1] . '-' . $matches[2] . ' 00:00:00';
            $hit = true;
        }
        if (!empty($params['deliveryDateTo']) && preg_match('/^(\d{2})\/(\d{2})\/(\d{4})$/', $params['deliveryDateTo'], $matches)) {
            $deliveryDateTo = $matches[3] . '-' . $matches[1] . '-' . $matches[2] . ' 23:59:59';
            $hit = true;
        }

        if (!empty($deliveryDateFrom) && !empty($deliveryDateTo)) {
            $query = $this->getEntityManager()->createQuery(
                'SELECT DISTINCT d.orderId
                    FROM AppBundle:StoreOrderDelivery d
                    WHERE d.deliveryDate BETWEEN :deliveryDateFrom AND :deliveryDateTo'
            )
                ->setParameter('deliveryDateFrom', $deliveryDateFrom)
                ->setParameter('deliveryDateTo', $deliveryDateTo);
            $deliveries = $query->getResult();
            if (!empty($deliveries)) {
                foreach ($deliveries as $delivery) {
                    $IDs[] = $delivery['orderId'];
                }
            }
        } elseif (!empty($deliveryDateFrom)) {
            $query = $this->getEntityManager()->createQuery(
                'SELECT DISTINCT d.orderId
                    FROM AppBundle:StoreOrderDelivery d
                    WHERE d.delivery = :deliveryDate'
            )
                ->setParameter('deliveryDate', $deliveryDateFrom);
            $deliveries = $query->getResult();
            if (!empty($deliveries)) {
                foreach ($deliveries as $delivery) {
                    $IDs[] = $delivery['orderId'];
                }
            }
        } elseif (!empty($deliveryDateTo)) {
            $query = $this->getEntityManager()->createQuery(
                'SELECT DISTINCT d.orderId
                    FROM AppBundle:StoreOrderDelivery d
                    WHERE d.delivery = :deliveryDate'
            )
                ->setParameter('deliveryDate', $deliveryDateTo);
            $deliveries = $query->getResult();
            if (!empty($deliveries)) {
                foreach ($deliveries as $delivery) {
                    $IDs[] = $delivery['orderId'];
                }
            }
        }

        if ($hit && empty($IDs)) {
            $IDs[] = -1;
        }
        if (!empty($IDs)) {
            $qb->andWhere('o.id IN (:deliveryIds)')
                ->setParameter('deliveryIds', $IDs);
        }

//        $qb->setMaxResults(1000)
//            ->orderBy('o.orderDate', 'DESC');
//        $query = $qb->getQuery();
//
//        return $query->getResult();

        $qb->orderBy('o.orderDate', 'DESC');
        $query = $qb->getQuery();

        $helper = new PaginatorHelper();
        $paginator = $helper->paginate($query, $page, $limit);

        return $paginator;
    }
}
